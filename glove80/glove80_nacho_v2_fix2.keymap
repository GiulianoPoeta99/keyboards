
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_gaming 1
#define LAYER_qwerty 2
#define LAYER_workman 3
#define LAYER_colemak 4
#define LAYER_mov_num 5
#define LAYER_symbols 6
#define LAYER_Lower 7
#define LAYER_Magic 8

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {

};

/* Automatically generated macro definitions */
/ {
    macros {

    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {
    
    };
};

/* Automatically generated combos definitions */
/ {
    combos {
    compatible = "zmk,combos";
    };
};

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
    &kp F1     &kp F2     &kp F3    &kp F4   &kp F6                                                                                &kp F7  &kp F8    &kp F9    &kp F10    &kp F11
   &kp SQT     &kp N1     &kp N2    &kp N3   &kp N4  &kp N5                                                              &kp N6    &kp N7  &kp N8    &kp N9     &kp N0  &kp EQUAL
   &kp ESC   &kp SEMI  &kp COMMA   &kp DOT    &kp P   &kp Y                                                               &kp F     &kp G   &kp C     &kp R      &kp L   &kp BSPC
   &kp TAB      &kp A      &kp O     &kp E    &kp U   &kp I                                                               &kp D     &kp H   &kp T     &kp N      &kp S    &kp DEL
 &kp LSHFT  &kp MINUS      &kp Q     &kp J    &kp K   &kp X   &kp LALT  &kp LC(C)  &kp LC(V)  &kp F5  &kp F12  &kp RALT   &kp B     &kp M   &kp W     &kp V      &kp Z  &kp RSHFT
 &kp LCTRL  &kp LC(Y)  &kp LC(Z)  &kp HOME  &kp END          &kp SPACE      &mo 5   &kp LGUI  &lower    &mo 6   &kp RET          &kp LEFT  &kp UP  &kp DOWN  &kp RIGHT  &kp RCTRL
            >;
        };

        layer_gaming {
            bindings = <
   &kp F1     &kp F2  &kp F3  &kp F4  &kp F6                                                                          &kp F7     &kp F8    &kp F9    &kp F10    &kp F11
 &kp LGUI    &kp ESC  &kp N1  &kp N2  &kp N3  &kp N5                                                        &kp N6    &kp N7     &kp N8    &kp N9     &kp N0  &kp EQUAL
 &kp LALT    &kp TAB   &kp Q   &kp W   &kp E   &kp R                                                         &kp Y     &kp U      &kp I     &kp O      &kp P   &kp BSPC
    &none  &kp LSHFT   &kp A   &kp S   &kp D   &kp F                                                         &kp H     &kp J      &kp K     &kp L   &kp SEMI    &kp DEL
    &none  &kp LCTRL  &kp N6   &kp G   &kp C   &kp V      &kp X   &kp Z   &kp U  &kp F5  &kp F12  &kp RALT   &kp N     &kp M  &kp COMMA   &kp DOT  &kp MINUS  &kp RSHFT
    &none      &none   &kp T   &kp Y   &kp B          &kp SPACE   &mo 5   &kp B  &lower    &mo 6   &kp RET          &kp LEFT     &kp UP  &kp DOWN  &kp RIGHT  &kp RCTRL
            >;
        };

        layer_qwerty {
            bindings = <
    &kp F1     &kp F2     &kp F3    &kp F4   &kp F6                                                                                &kp F7     &kp F8    &kp F9    &kp F10    &kp F11
   &kp SQT     &kp N1     &kp N2    &kp N3   &kp N4  &kp N5                                                              &kp N6    &kp N7     &kp N8    &kp N9     &kp N0  &kp EQUAL
   &kp ESC      &kp Q      &kp W     &kp E    &kp R   &kp T                                                               &kp Y     &kp U      &kp I     &kp O      &kp P   &kp BSPC
   &kp TAB      &kp A      &kp S     &kp D    &kp F   &kp G                                                               &kp H     &kp J      &kp K     &kp L   &kp SEMI    &kp DEL
 &kp LSHFT      &kp Z      &kp X     &kp C    &kp V   &kp B   &kp LALT  &kp LC(C)  &kp LC(V)  &kp F5  &kp F12  &kp RALT   &kp N     &kp M  &kp COMMA   &kp DOT  &kp MINUS  &kp RSHFT
 &kp LCTRL  &kp LC(Y)  &kp LC(Z)  &kp HOME  &kp END          &kp SPACE      &mo 5   &kp LGUI  &lower    &mo 6   &kp RET          &kp LEFT     &kp UP  &kp DOWN  &kp RIGHT  &kp RCTRL
            >;
        };

        layer_workman {
            bindings = <
    &kp F1     &kp F2     &kp F3    &kp F4   &kp F6                                                                                &kp F7     &kp F8    &kp F9    &kp F10    &kp F11
   &kp SQT     &kp N1     &kp N2    &kp N3   &kp N4  &kp N5                                                              &kp N6    &kp N7     &kp N8    &kp N9     &kp N0  &kp EQUAL
   &kp ESC      &kp Q      &kp D     &kp R    &kp W   &kp B                                                               &kp J     &kp F      &kp U     &kp P   &kp SEMI   &kp BSPC
   &kp TAB      &kp A      &kp S     &kp H    &kp T   &kp G                                                               &kp Y     &kp N      &kp E     &kp O      &kp I    &kp DEL
 &kp LSHFT      &kp Z      &kp X     &kp M    &kp C   &kp V   &kp LALT  &kp LC(C)  &kp LC(V)  &kp F5  &kp F12  &kp RALT   &kp K     &kp L  &kp COMMA   &kp DOT  &kp MINUS  &kp RSHFT
 &kp LCTRL  &kp LC(Y)  &kp LC(Z)  &kp HOME  &kp END          &kp SPACE      &mo 5   &kp LGUI  &lower    &mo 6   &kp RET          &kp LEFT     &kp UP  &kp DOWN  &kp RIGHT  &kp RCTRL
            >;
        };

        layer_colemak {
            bindings = <
    &kp F1     &kp F2     &kp F3    &kp F4   &kp F6                                                                                &kp F7     &kp F8    &kp F9    &kp F10    &kp F11
   &kp SQT     &kp N1     &kp N2    &kp N3   &kp N4  &kp N5                                                              &kp N6    &kp N7     &kp N8    &kp N9     &kp N0  &kp EQUAL
   &kp ESC      &kp Q      &kp W     &kp F    &kp P   &kp G                                                               &kp J     &kp L      &kp U     &kp Y   &kp SEMI   &kp BSPC
   &kp TAB      &kp A      &kp R     &kp S    &kp T   &kp D                                                               &kp H     &kp N      &kp E     &kp I      &kp O    &kp DEL
 &kp LSHFT      &kp Z      &kp X     &kp C    &kp V   &kp B   &kp LALT  &kp LC(C)  &kp LC(V)  &kp F5  &kp F12  &kp RALT   &kp K     &kp M  &kp COMMA   &kp DOT  &kp MINUS  &kp RSHFT
 &kp LCTRL  &kp LC(Y)  &kp LC(Z)  &kp HOME  &kp END          &kp SPACE      &mo 5   &kp LGUI  &lower    &mo 6   &kp RET          &kp LEFT     &kp UP  &kp DOWN  &kp RIGHT  &kp RCTRL
            >;
        };

        layer_mov_num {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT   &kp C_PP                                                                                                   &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP      &none      &none
        &none         &none       &none       &none    &kp INS  &kp PSCRN                                                                             &kp CARET   &kp PRCNT     &kp EQUAL      &kp FSLH   &kp STAR      &none
      &kp ESC         &none    &kp HOME      &kp UP    &kp END  &kp PG_UP                                                                              &kp LPAR      &kp N7        &kp N8        &kp N9  &kp MINUS   &kp BSPC
      &kp TAB         &none    &kp LEFT    &kp DOWN  &kp RIGHT  &kp PG_DN                                                                              &kp RPAR      &kp N4        &kp N5        &kp N6   &kp PLUS    &kp DEL
    &kp LSHFT         &kp H       &kp J       &kp K      &kp L      &none   &kp LALT  &kp LC(C)  &kp LC(V)    &kp F5               &kp F12  &kp RALT   &kp PIPE      &kp N1        &kp N2        &kp N3    &kp RET  &kp RSHFT
    &kp LCTRL         &none       &none       &none      &none             &kp SPACE     &trans   &kp LGUI  &kp RGUI  &magic LAYER_Magic 0   &kp RET                 &kp N0     &kp COMMA       &kp DOT    &kp RET  &kp RCTRL
            >;
        };

        layer_symbols {
            bindings = <
   &kp F14           &kp F15          &kp F16    &kp F17         &kp F18                                                                                                 &kp F19    &kp F20    &kp F21    &kp F22    &kp F23
   &kp F13             &none            &none      &none           &none      &none                                                                             &kp LT    &kp GT      &none      &none      &none    &kp F24
   &kp ESC            &kp AT  &kp LS(RA(SQT))  &kp TILDE  &kp LS(RA(N1))   &kp EXCL                                                                           &kp LPAR  &kp RPAR   &kp AMPS   &kp PIPE  &kp CARET   &kp BSPC
   &kp TAB         &kp GRAVE          &kp DQT    &kp SQT    &kp RA(FSLH)  &kp QMARK                                                                           &kp LBKT  &kp RBKT  &kp EQUAL   &kp PLUS   &kp STAR    &kp DEL
 &kp LSHFT  &kp LS(RA(SEMI))         &kp DLLR   &kp HASH        &kp BSLH   &kp FSLH   &kp LALT             &kp LC(C)  &kp LC(V)    &kp F5  &kp F12  &kp RALT  &kp LBRC  &kp RBRC    &kp DOT  &kp MINUS  &kp PRCNT  &kp RSHFT
 &kp LCTRL             &none            &none      &none           &none             &kp SPACE  &magic LAYER_Magic 0   &kp LGUI  &kp RGUI   &trans   &kp RET               &none      &none      &none      &none  &kp RCTRL
            >;
        };

        layer_Lower {
            bindings = <
  &none   &none   &none   &none   &none                                                                   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &to 1   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &to 0   &to 2   &to 3   &to 4   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none  &trans   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                            &none   &none   &none         &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                   &none   &none   &none   &none         &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none   &none   &none   &none         &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &bt_0   &bt_1   &bt_2   &bt_3  &out OUT_USB     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none         &none      &sys_reset
       &none            &none            &none            &none            &none                    &none  &trans   &none   &none  &trans   &none           &none   &none   &none         &none           &none
            >;
        };

    };
};
